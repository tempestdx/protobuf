// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: tempestdx/app/v1/app.proto

package appv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/tempestdx/protobuf/gen/go/tempestdx/app/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AppServiceName is the fully-qualified name of the AppService service.
	AppServiceName = "tempestdx.app.v1.AppService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AppServiceDescribeProcedure is the fully-qualified name of the AppService's Describe RPC.
	AppServiceDescribeProcedure = "/tempestdx.app.v1.AppService/Describe"
	// AppServiceHealthCheckProcedure is the fully-qualified name of the AppService's HealthCheck RPC.
	AppServiceHealthCheckProcedure = "/tempestdx.app.v1.AppService/HealthCheck"
	// AppServiceExecuteResourceOperationProcedure is the fully-qualified name of the AppService's
	// ExecuteResourceOperation RPC.
	AppServiceExecuteResourceOperationProcedure = "/tempestdx.app.v1.AppService/ExecuteResourceOperation"
	// AppServiceListResourcesProcedure is the fully-qualified name of the AppService's ListResources
	// RPC.
	AppServiceListResourcesProcedure = "/tempestdx.app.v1.AppService/ListResources"
	// AppServiceExecuteResourceActionProcedure is the fully-qualified name of the AppService's
	// ExecuteResourceAction RPC.
	AppServiceExecuteResourceActionProcedure = "/tempestdx.app.v1.AppService/ExecuteResourceAction"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	appServiceServiceDescriptor                        = v1.File_tempestdx_app_v1_app_proto.Services().ByName("AppService")
	appServiceDescribeMethodDescriptor                 = appServiceServiceDescriptor.Methods().ByName("Describe")
	appServiceHealthCheckMethodDescriptor              = appServiceServiceDescriptor.Methods().ByName("HealthCheck")
	appServiceExecuteResourceOperationMethodDescriptor = appServiceServiceDescriptor.Methods().ByName("ExecuteResourceOperation")
	appServiceListResourcesMethodDescriptor            = appServiceServiceDescriptor.Methods().ByName("ListResources")
	appServiceExecuteResourceActionMethodDescriptor    = appServiceServiceDescriptor.Methods().ByName("ExecuteResourceAction")
)

// AppServiceClient is a client for the tempestdx.app.v1.AppService service.
type AppServiceClient interface {
	// Returns information about what the app supports.
	Describe(context.Context, *connect.Request[v1.DescribeRequest]) (*connect.Response[v1.DescribeResponse], error)
	// Health check endpoint
	HealthCheck(context.Context, *connect.Request[v1.HealthCheckRequest]) (*connect.Response[v1.HealthCheckResponse], error)
	// Methods for executing operations on Resources.
	// Create, Read, Update, or Delete a Resource.
	ExecuteResourceOperation(context.Context, *connect.Request[v1.ExecuteResourceOperationRequest]) (*connect.Response[v1.ExecuteResourceOperationResponse], error)
	// List Resources of a given type in the external system.
	ListResources(context.Context, *connect.Request[v1.ListResourcesRequest]) (*connect.Response[v1.ListResourcesResponse], error)
	// Execute an action on a Resource, as defined by the app.
	ExecuteResourceAction(context.Context, *connect.Request[v1.ExecuteResourceActionRequest]) (*connect.Response[v1.ExecuteResourceActionResponse], error)
}

// NewAppServiceClient constructs a client for the tempestdx.app.v1.AppService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAppServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AppServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &appServiceClient{
		describe: connect.NewClient[v1.DescribeRequest, v1.DescribeResponse](
			httpClient,
			baseURL+AppServiceDescribeProcedure,
			connect.WithSchema(appServiceDescribeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		healthCheck: connect.NewClient[v1.HealthCheckRequest, v1.HealthCheckResponse](
			httpClient,
			baseURL+AppServiceHealthCheckProcedure,
			connect.WithSchema(appServiceHealthCheckMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		executeResourceOperation: connect.NewClient[v1.ExecuteResourceOperationRequest, v1.ExecuteResourceOperationResponse](
			httpClient,
			baseURL+AppServiceExecuteResourceOperationProcedure,
			connect.WithSchema(appServiceExecuteResourceOperationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listResources: connect.NewClient[v1.ListResourcesRequest, v1.ListResourcesResponse](
			httpClient,
			baseURL+AppServiceListResourcesProcedure,
			connect.WithSchema(appServiceListResourcesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		executeResourceAction: connect.NewClient[v1.ExecuteResourceActionRequest, v1.ExecuteResourceActionResponse](
			httpClient,
			baseURL+AppServiceExecuteResourceActionProcedure,
			connect.WithSchema(appServiceExecuteResourceActionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// appServiceClient implements AppServiceClient.
type appServiceClient struct {
	describe                 *connect.Client[v1.DescribeRequest, v1.DescribeResponse]
	healthCheck              *connect.Client[v1.HealthCheckRequest, v1.HealthCheckResponse]
	executeResourceOperation *connect.Client[v1.ExecuteResourceOperationRequest, v1.ExecuteResourceOperationResponse]
	listResources            *connect.Client[v1.ListResourcesRequest, v1.ListResourcesResponse]
	executeResourceAction    *connect.Client[v1.ExecuteResourceActionRequest, v1.ExecuteResourceActionResponse]
}

// Describe calls tempestdx.app.v1.AppService.Describe.
func (c *appServiceClient) Describe(ctx context.Context, req *connect.Request[v1.DescribeRequest]) (*connect.Response[v1.DescribeResponse], error) {
	return c.describe.CallUnary(ctx, req)
}

// HealthCheck calls tempestdx.app.v1.AppService.HealthCheck.
func (c *appServiceClient) HealthCheck(ctx context.Context, req *connect.Request[v1.HealthCheckRequest]) (*connect.Response[v1.HealthCheckResponse], error) {
	return c.healthCheck.CallUnary(ctx, req)
}

// ExecuteResourceOperation calls tempestdx.app.v1.AppService.ExecuteResourceOperation.
func (c *appServiceClient) ExecuteResourceOperation(ctx context.Context, req *connect.Request[v1.ExecuteResourceOperationRequest]) (*connect.Response[v1.ExecuteResourceOperationResponse], error) {
	return c.executeResourceOperation.CallUnary(ctx, req)
}

// ListResources calls tempestdx.app.v1.AppService.ListResources.
func (c *appServiceClient) ListResources(ctx context.Context, req *connect.Request[v1.ListResourcesRequest]) (*connect.Response[v1.ListResourcesResponse], error) {
	return c.listResources.CallUnary(ctx, req)
}

// ExecuteResourceAction calls tempestdx.app.v1.AppService.ExecuteResourceAction.
func (c *appServiceClient) ExecuteResourceAction(ctx context.Context, req *connect.Request[v1.ExecuteResourceActionRequest]) (*connect.Response[v1.ExecuteResourceActionResponse], error) {
	return c.executeResourceAction.CallUnary(ctx, req)
}

// AppServiceHandler is an implementation of the tempestdx.app.v1.AppService service.
type AppServiceHandler interface {
	// Returns information about what the app supports.
	Describe(context.Context, *connect.Request[v1.DescribeRequest]) (*connect.Response[v1.DescribeResponse], error)
	// Health check endpoint
	HealthCheck(context.Context, *connect.Request[v1.HealthCheckRequest]) (*connect.Response[v1.HealthCheckResponse], error)
	// Methods for executing operations on Resources.
	// Create, Read, Update, or Delete a Resource.
	ExecuteResourceOperation(context.Context, *connect.Request[v1.ExecuteResourceOperationRequest]) (*connect.Response[v1.ExecuteResourceOperationResponse], error)
	// List Resources of a given type in the external system.
	ListResources(context.Context, *connect.Request[v1.ListResourcesRequest]) (*connect.Response[v1.ListResourcesResponse], error)
	// Execute an action on a Resource, as defined by the app.
	ExecuteResourceAction(context.Context, *connect.Request[v1.ExecuteResourceActionRequest]) (*connect.Response[v1.ExecuteResourceActionResponse], error)
}

// NewAppServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAppServiceHandler(svc AppServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	appServiceDescribeHandler := connect.NewUnaryHandler(
		AppServiceDescribeProcedure,
		svc.Describe,
		connect.WithSchema(appServiceDescribeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	appServiceHealthCheckHandler := connect.NewUnaryHandler(
		AppServiceHealthCheckProcedure,
		svc.HealthCheck,
		connect.WithSchema(appServiceHealthCheckMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	appServiceExecuteResourceOperationHandler := connect.NewUnaryHandler(
		AppServiceExecuteResourceOperationProcedure,
		svc.ExecuteResourceOperation,
		connect.WithSchema(appServiceExecuteResourceOperationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	appServiceListResourcesHandler := connect.NewUnaryHandler(
		AppServiceListResourcesProcedure,
		svc.ListResources,
		connect.WithSchema(appServiceListResourcesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	appServiceExecuteResourceActionHandler := connect.NewUnaryHandler(
		AppServiceExecuteResourceActionProcedure,
		svc.ExecuteResourceAction,
		connect.WithSchema(appServiceExecuteResourceActionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/tempestdx.app.v1.AppService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AppServiceDescribeProcedure:
			appServiceDescribeHandler.ServeHTTP(w, r)
		case AppServiceHealthCheckProcedure:
			appServiceHealthCheckHandler.ServeHTTP(w, r)
		case AppServiceExecuteResourceOperationProcedure:
			appServiceExecuteResourceOperationHandler.ServeHTTP(w, r)
		case AppServiceListResourcesProcedure:
			appServiceListResourcesHandler.ServeHTTP(w, r)
		case AppServiceExecuteResourceActionProcedure:
			appServiceExecuteResourceActionHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAppServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAppServiceHandler struct{}

func (UnimplementedAppServiceHandler) Describe(context.Context, *connect.Request[v1.DescribeRequest]) (*connect.Response[v1.DescribeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tempestdx.app.v1.AppService.Describe is not implemented"))
}

func (UnimplementedAppServiceHandler) HealthCheck(context.Context, *connect.Request[v1.HealthCheckRequest]) (*connect.Response[v1.HealthCheckResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tempestdx.app.v1.AppService.HealthCheck is not implemented"))
}

func (UnimplementedAppServiceHandler) ExecuteResourceOperation(context.Context, *connect.Request[v1.ExecuteResourceOperationRequest]) (*connect.Response[v1.ExecuteResourceOperationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tempestdx.app.v1.AppService.ExecuteResourceOperation is not implemented"))
}

func (UnimplementedAppServiceHandler) ListResources(context.Context, *connect.Request[v1.ListResourcesRequest]) (*connect.Response[v1.ListResourcesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tempestdx.app.v1.AppService.ListResources is not implemented"))
}

func (UnimplementedAppServiceHandler) ExecuteResourceAction(context.Context, *connect.Request[v1.ExecuteResourceActionRequest]) (*connect.Response[v1.ExecuteResourceActionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tempestdx.app.v1.AppService.ExecuteResourceAction is not implemented"))
}
