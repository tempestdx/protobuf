// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: tempestdx/app/v1/app.proto

package appv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type HealthCheckStatus int32

const (
	HealthCheckStatus_HEALTH_CHECK_STATUS_UNSPECIFIED HealthCheckStatus = 0
	HealthCheckStatus_HEALTH_CHECK_STATUS_HEALTHY     HealthCheckStatus = 1
	HealthCheckStatus_HEALTH_CHECK_STATUS_DEGRADED    HealthCheckStatus = 2
	HealthCheckStatus_HEALTH_CHECK_STATUS_DISRUPTED   HealthCheckStatus = 3
)

// Enum value maps for HealthCheckStatus.
var (
	HealthCheckStatus_name = map[int32]string{
		0: "HEALTH_CHECK_STATUS_UNSPECIFIED",
		1: "HEALTH_CHECK_STATUS_HEALTHY",
		2: "HEALTH_CHECK_STATUS_DEGRADED",
		3: "HEALTH_CHECK_STATUS_DISRUPTED",
	}
	HealthCheckStatus_value = map[string]int32{
		"HEALTH_CHECK_STATUS_UNSPECIFIED": 0,
		"HEALTH_CHECK_STATUS_HEALTHY":     1,
		"HEALTH_CHECK_STATUS_DEGRADED":    2,
		"HEALTH_CHECK_STATUS_DISRUPTED":   3,
	}
)

func (x HealthCheckStatus) Enum() *HealthCheckStatus {
	p := new(HealthCheckStatus)
	*p = x
	return p
}

func (x HealthCheckStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HealthCheckStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_tempestdx_app_v1_app_proto_enumTypes[0].Descriptor()
}

func (HealthCheckStatus) Type() protoreflect.EnumType {
	return &file_tempestdx_app_v1_app_proto_enumTypes[0]
}

func (x HealthCheckStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HealthCheckStatus.Descriptor instead.
func (HealthCheckStatus) EnumDescriptor() ([]byte, []int) {
	return file_tempestdx_app_v1_app_proto_rawDescGZIP(), []int{0}
}

type LinkType int32

const (
	LinkType_LINK_TYPE_UNSPECIFIED    LinkType = 0
	LinkType_LINK_TYPE_DOCUMENTATION  LinkType = 1
	LinkType_LINK_TYPE_ADMINISTRATION LinkType = 2
	LinkType_LINK_TYPE_SUPPORT        LinkType = 3
	LinkType_LINK_TYPE_ENDPOINT       LinkType = 4
	LinkType_LINK_TYPE_EXTERNAL       LinkType = 5
)

// Enum value maps for LinkType.
var (
	LinkType_name = map[int32]string{
		0: "LINK_TYPE_UNSPECIFIED",
		1: "LINK_TYPE_DOCUMENTATION",
		2: "LINK_TYPE_ADMINISTRATION",
		3: "LINK_TYPE_SUPPORT",
		4: "LINK_TYPE_ENDPOINT",
		5: "LINK_TYPE_EXTERNAL",
	}
	LinkType_value = map[string]int32{
		"LINK_TYPE_UNSPECIFIED":    0,
		"LINK_TYPE_DOCUMENTATION":  1,
		"LINK_TYPE_ADMINISTRATION": 2,
		"LINK_TYPE_SUPPORT":        3,
		"LINK_TYPE_ENDPOINT":       4,
		"LINK_TYPE_EXTERNAL":       5,
	}
)

func (x LinkType) Enum() *LinkType {
	p := new(LinkType)
	*p = x
	return p
}

func (x LinkType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LinkType) Descriptor() protoreflect.EnumDescriptor {
	return file_tempestdx_app_v1_app_proto_enumTypes[1].Descriptor()
}

func (LinkType) Type() protoreflect.EnumType {
	return &file_tempestdx_app_v1_app_proto_enumTypes[1]
}

func (x LinkType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LinkType.Descriptor instead.
func (LinkType) EnumDescriptor() ([]byte, []int) {
	return file_tempestdx_app_v1_app_proto_rawDescGZIP(), []int{1}
}

type LifecycleStage int32

const (
	LifecycleStage_LIFECYCLE_STAGE_UNSPECIFIED LifecycleStage = 0
	LifecycleStage_LIFECYCLE_STAGE_CODE        LifecycleStage = 1
	LifecycleStage_LIFECYCLE_STAGE_BUILD       LifecycleStage = 2
	LifecycleStage_LIFECYCLE_STAGE_TEST        LifecycleStage = 3
	LifecycleStage_LIFECYCLE_STAGE_RELEASE     LifecycleStage = 4
	LifecycleStage_LIFECYCLE_STAGE_DEPLOY      LifecycleStage = 5
	LifecycleStage_LIFECYCLE_STAGE_OPERATE     LifecycleStage = 6
	LifecycleStage_LIFECYCLE_STAGE_MONITOR     LifecycleStage = 7
	LifecycleStage_LIFECYCLE_STAGE_OTHER       LifecycleStage = 8
)

// Enum value maps for LifecycleStage.
var (
	LifecycleStage_name = map[int32]string{
		0: "LIFECYCLE_STAGE_UNSPECIFIED",
		1: "LIFECYCLE_STAGE_CODE",
		2: "LIFECYCLE_STAGE_BUILD",
		3: "LIFECYCLE_STAGE_TEST",
		4: "LIFECYCLE_STAGE_RELEASE",
		5: "LIFECYCLE_STAGE_DEPLOY",
		6: "LIFECYCLE_STAGE_OPERATE",
		7: "LIFECYCLE_STAGE_MONITOR",
		8: "LIFECYCLE_STAGE_OTHER",
	}
	LifecycleStage_value = map[string]int32{
		"LIFECYCLE_STAGE_UNSPECIFIED": 0,
		"LIFECYCLE_STAGE_CODE":        1,
		"LIFECYCLE_STAGE_BUILD":       2,
		"LIFECYCLE_STAGE_TEST":        3,
		"LIFECYCLE_STAGE_RELEASE":     4,
		"LIFECYCLE_STAGE_DEPLOY":      5,
		"LIFECYCLE_STAGE_OPERATE":     6,
		"LIFECYCLE_STAGE_MONITOR":     7,
		"LIFECYCLE_STAGE_OTHER":       8,
	}
)

func (x LifecycleStage) Enum() *LifecycleStage {
	p := new(LifecycleStage)
	*p = x
	return p
}

func (x LifecycleStage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LifecycleStage) Descriptor() protoreflect.EnumDescriptor {
	return file_tempestdx_app_v1_app_proto_enumTypes[2].Descriptor()
}

func (LifecycleStage) Type() protoreflect.EnumType {
	return &file_tempestdx_app_v1_app_proto_enumTypes[2]
}

func (x LifecycleStage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LifecycleStage.Descriptor instead.
func (LifecycleStage) EnumDescriptor() ([]byte, []int) {
	return file_tempestdx_app_v1_app_proto_rawDescGZIP(), []int{2}
}

type OwnerType int32

const (
	OwnerType_OWNER_TYPE_UNSPECIFIED OwnerType = 0
	OwnerType_OWNER_TYPE_USER        OwnerType = 1
	OwnerType_OWNER_TYPE_TEAM        OwnerType = 2
)

// Enum value maps for OwnerType.
var (
	OwnerType_name = map[int32]string{
		0: "OWNER_TYPE_UNSPECIFIED",
		1: "OWNER_TYPE_USER",
		2: "OWNER_TYPE_TEAM",
	}
	OwnerType_value = map[string]int32{
		"OWNER_TYPE_UNSPECIFIED": 0,
		"OWNER_TYPE_USER":        1,
		"OWNER_TYPE_TEAM":        2,
	}
)

func (x OwnerType) Enum() *OwnerType {
	p := new(OwnerType)
	*p = x
	return p
}

func (x OwnerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OwnerType) Descriptor() protoreflect.EnumDescriptor {
	return file_tempestdx_app_v1_app_proto_enumTypes[3].Descriptor()
}

func (OwnerType) Type() protoreflect.EnumType {
	return &file_tempestdx_app_v1_app_proto_enumTypes[3]
}

func (x OwnerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OwnerType.Descriptor instead.
func (OwnerType) EnumDescriptor() ([]byte, []int) {
	return file_tempestdx_app_v1_app_proto_rawDescGZIP(), []int{3}
}

type ResourceOperation int32

const (
	ResourceOperation_RESOURCE_OPERATION_UNSPECIFIED ResourceOperation = 0
	ResourceOperation_RESOURCE_OPERATION_CREATE      ResourceOperation = 1
	ResourceOperation_RESOURCE_OPERATION_UPDATE      ResourceOperation = 2
	ResourceOperation_RESOURCE_OPERATION_DELETE      ResourceOperation = 3
	ResourceOperation_RESOURCE_OPERATION_READ        ResourceOperation = 4
)

// Enum value maps for ResourceOperation.
var (
	ResourceOperation_name = map[int32]string{
		0: "RESOURCE_OPERATION_UNSPECIFIED",
		1: "RESOURCE_OPERATION_CREATE",
		2: "RESOURCE_OPERATION_UPDATE",
		3: "RESOURCE_OPERATION_DELETE",
		4: "RESOURCE_OPERATION_READ",
	}
	ResourceOperation_value = map[string]int32{
		"RESOURCE_OPERATION_UNSPECIFIED": 0,
		"RESOURCE_OPERATION_CREATE":      1,
		"RESOURCE_OPERATION_UPDATE":      2,
		"RESOURCE_OPERATION_DELETE":      3,
		"RESOURCE_OPERATION_READ":        4,
	}
)

func (x ResourceOperation) Enum() *ResourceOperation {
	p := new(ResourceOperation)
	*p = x
	return p
}

func (x ResourceOperation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceOperation) Descriptor() protoreflect.EnumDescriptor {
	return file_tempestdx_app_v1_app_proto_enumTypes[4].Descriptor()
}

func (ResourceOperation) Type() protoreflect.EnumType {
	return &file_tempestdx_app_v1_app_proto_enumTypes[4]
}

func (x ResourceOperation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourceOperation.Descriptor instead.
func (ResourceOperation) EnumDescriptor() ([]byte, []int) {
	return file_tempestdx_app_v1_app_proto_rawDescGZIP(), []int{4}
}

type EnvironmentVariableType int32

const (
	EnvironmentVariableType_ENVIRONMENT_VARIABLE_TYPE_UNSPECIFIED EnvironmentVariableType = 0
	EnvironmentVariableType_ENVIRONMENT_VARIABLE_TYPE_VAR         EnvironmentVariableType = 1
	EnvironmentVariableType_ENVIRONMENT_VARIABLE_TYPE_SECRET      EnvironmentVariableType = 2
	EnvironmentVariableType_ENVIRONMENT_VARIABLE_TYPE_CERTIFICATE EnvironmentVariableType = 3
	EnvironmentVariableType_ENVIRONMENT_VARIABLE_TYPE_PRIVATE_KEY EnvironmentVariableType = 4
	EnvironmentVariableType_ENVIRONMENT_VARIABLE_TYPE_PUBLIC_KEY  EnvironmentVariableType = 5
)

// Enum value maps for EnvironmentVariableType.
var (
	EnvironmentVariableType_name = map[int32]string{
		0: "ENVIRONMENT_VARIABLE_TYPE_UNSPECIFIED",
		1: "ENVIRONMENT_VARIABLE_TYPE_VAR",
		2: "ENVIRONMENT_VARIABLE_TYPE_SECRET",
		3: "ENVIRONMENT_VARIABLE_TYPE_CERTIFICATE",
		4: "ENVIRONMENT_VARIABLE_TYPE_PRIVATE_KEY",
		5: "ENVIRONMENT_VARIABLE_TYPE_PUBLIC_KEY",
	}
	EnvironmentVariableType_value = map[string]int32{
		"ENVIRONMENT_VARIABLE_TYPE_UNSPECIFIED": 0,
		"ENVIRONMENT_VARIABLE_TYPE_VAR":         1,
		"ENVIRONMENT_VARIABLE_TYPE_SECRET":      2,
		"ENVIRONMENT_VARIABLE_TYPE_CERTIFICATE": 3,
		"ENVIRONMENT_VARIABLE_TYPE_PRIVATE_KEY": 4,
		"ENVIRONMENT_VARIABLE_TYPE_PUBLIC_KEY":  5,
	}
)

func (x EnvironmentVariableType) Enum() *EnvironmentVariableType {
	p := new(EnvironmentVariableType)
	*p = x
	return p
}

func (x EnvironmentVariableType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnvironmentVariableType) Descriptor() protoreflect.EnumDescriptor {
	return file_tempestdx_app_v1_app_proto_enumTypes[5].Descriptor()
}

func (EnvironmentVariableType) Type() protoreflect.EnumType {
	return &file_tempestdx_app_v1_app_proto_enumTypes[5]
}

func (x EnvironmentVariableType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnvironmentVariableType.Descriptor instead.
func (EnvironmentVariableType) EnumDescriptor() ([]byte, []int) {
	return file_tempestdx_app_v1_app_proto_rawDescGZIP(), []int{5}
}

type ShutdownRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ShutdownRequest) Reset() {
	*x = ShutdownRequest{}
	mi := &file_tempestdx_app_v1_app_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShutdownRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShutdownRequest) ProtoMessage() {}

func (x *ShutdownRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tempestdx_app_v1_app_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShutdownRequest.ProtoReflect.Descriptor instead.
func (*ShutdownRequest) Descriptor() ([]byte, []int) {
	return file_tempestdx_app_v1_app_proto_rawDescGZIP(), []int{0}
}

type ShutdownResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ShutdownResponse) Reset() {
	*x = ShutdownResponse{}
	mi := &file_tempestdx_app_v1_app_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShutdownResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShutdownResponse) ProtoMessage() {}

func (x *ShutdownResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tempestdx_app_v1_app_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShutdownResponse.ProtoReflect.Descriptor instead.
func (*ShutdownResponse) Descriptor() ([]byte, []int) {
	return file_tempestdx_app_v1_app_proto_rawDescGZIP(), []int{1}
}

type DescribeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DescribeRequest) Reset() {
	*x = DescribeRequest{}
	mi := &file_tempestdx_app_v1_app_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DescribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeRequest) ProtoMessage() {}

func (x *DescribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tempestdx_app_v1_app_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeRequest.ProtoReflect.Descriptor instead.
func (*DescribeRequest) Descriptor() ([]byte, []int) {
	return file_tempestdx_app_v1_app_proto_rawDescGZIP(), []int{2}
}

type DescribeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Resources managed by the app.
	ResourceDefinitions []*ResourceDefinition `protobuf:"bytes,1,rep,name=resource_definitions,json=resourceDefinitions,proto3" json:"resource_definitions,omitempty"`
}

func (x *DescribeResponse) Reset() {
	*x = DescribeResponse{}
	mi := &file_tempestdx_app_v1_app_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DescribeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeResponse) ProtoMessage() {}

func (x *DescribeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tempestdx_app_v1_app_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeResponse.ProtoReflect.Descriptor instead.
func (*DescribeResponse) Descriptor() ([]byte, []int) {
	return file_tempestdx_app_v1_app_proto_rawDescGZIP(), []int{3}
}

func (x *DescribeResponse) GetResourceDefinitions() []*ResourceDefinition {
	if x != nil {
		return x.ResourceDefinitions
	}
	return nil
}

type HealthCheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of resource to health check.
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *HealthCheckRequest) Reset() {
	*x = HealthCheckRequest{}
	mi := &file_tempestdx_app_v1_app_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckRequest) ProtoMessage() {}

func (x *HealthCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tempestdx_app_v1_app_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckRequest.ProtoReflect.Descriptor instead.
func (*HealthCheckRequest) Descriptor() ([]byte, []int) {
	return file_tempestdx_app_v1_app_proto_rawDescGZIP(), []int{4}
}

func (x *HealthCheckRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type HealthCheckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The status of the health check.
	Status HealthCheckStatus `protobuf:"varint,1,opt,name=status,proto3,enum=tempestdx.app.v1.HealthCheckStatus" json:"status,omitempty"`
	// A message describing the health check status.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *HealthCheckResponse) Reset() {
	*x = HealthCheckResponse{}
	mi := &file_tempestdx_app_v1_app_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckResponse) ProtoMessage() {}

func (x *HealthCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tempestdx_app_v1_app_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckResponse.ProtoReflect.Descriptor instead.
func (*HealthCheckResponse) Descriptor() ([]byte, []int) {
	return file_tempestdx_app_v1_app_proto_rawDescGZIP(), []int{5}
}

func (x *HealthCheckResponse) GetStatus() HealthCheckStatus {
	if x != nil {
		return x.Status
	}
	return HealthCheckStatus_HEALTH_CHECK_STATUS_UNSPECIFIED
}

func (x *HealthCheckResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type Link struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url   string   `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Title string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Type  LinkType `protobuf:"varint,3,opt,name=type,proto3,enum=tempestdx.app.v1.LinkType" json:"type,omitempty"`
}

func (x *Link) Reset() {
	*x = Link{}
	mi := &file_tempestdx_app_v1_app_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Link) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Link) ProtoMessage() {}

func (x *Link) ProtoReflect() protoreflect.Message {
	mi := &file_tempestdx_app_v1_app_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Link.ProtoReflect.Descriptor instead.
func (*Link) Descriptor() ([]byte, []int) {
	return file_tempestdx_app_v1_app_proto_rawDescGZIP(), []int{6}
}

func (x *Link) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Link) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Link) GetType() LinkType {
	if x != nil {
		return x.Type
	}
	return LinkType_LINK_TYPE_UNSPECIFIED
}

type ActionDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique name of the action.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The human-readable display name of the action.
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// A description of what the action does.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// The input schema for the action.
	InputSchema *structpb.Struct `protobuf:"bytes,4,opt,name=input_schema,json=inputSchema,proto3" json:"input_schema,omitempty"`
	// The output schema for the action.
	OutputSchema *structpb.Struct `protobuf:"bytes,5,opt,name=output_schema,json=outputSchema,proto3" json:"output_schema,omitempty"`
}

func (x *ActionDefinition) Reset() {
	*x = ActionDefinition{}
	mi := &file_tempestdx_app_v1_app_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActionDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionDefinition) ProtoMessage() {}

func (x *ActionDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_tempestdx_app_v1_app_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionDefinition.ProtoReflect.Descriptor instead.
func (*ActionDefinition) Descriptor() ([]byte, []int) {
	return file_tempestdx_app_v1_app_proto_rawDescGZIP(), []int{7}
}

func (x *ActionDefinition) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ActionDefinition) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *ActionDefinition) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ActionDefinition) GetInputSchema() *structpb.Struct {
	if x != nil {
		return x.InputSchema
	}
	return nil
}

func (x *ActionDefinition) GetOutputSchema() *structpb.Struct {
	if x != nil {
		return x.OutputSchema
	}
	return nil
}

type ResourceDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique type of the resource.
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// The human-readable display name of the resource.
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// A description of what the resource definition represents in the external system.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// The schema for the properties of the resource. The result of CREATE, READ, UPDATE, and LIST
	// will be validated against this schema.
	PropertiesSchema *structpb.Struct `protobuf:"bytes,4,opt,name=properties_schema,json=propertiesSchema,proto3" json:"properties_schema,omitempty"`
	// Indicates if the Resource supports the LIST operation.
	ListSupported bool `protobuf:"varint,5,opt,name=list_supported,json=listSupported,proto3" json:"list_supported,omitempty"`
	// Indicates if the Resource supports the READ operation.
	ReadSupported bool `protobuf:"varint,6,opt,name=read_supported,json=readSupported,proto3" json:"read_supported,omitempty"`
	// Indicates if the Resource supports the CREATE operation.
	CreateSupported bool `protobuf:"varint,7,opt,name=create_supported,json=createSupported,proto3" json:"create_supported,omitempty"`
	// The schema for the input of the CREATE operation. This will be validated against
	// the user's input before the operation is executed.
	CreateInputSchema *structpb.Struct `protobuf:"bytes,8,opt,name=create_input_schema,json=createInputSchema,proto3" json:"create_input_schema,omitempty"`
	// Indicates if the Resource supports the UPDATE operation.
	UpdateSupported bool `protobuf:"varint,9,opt,name=update_supported,json=updateSupported,proto3" json:"update_supported,omitempty"`
	// The schema for the input of the UPDATE operation. This will be validated against
	// the user's input before the operation is executed.
	UpdateInputSchema *structpb.Struct `protobuf:"bytes,10,opt,name=update_input_schema,json=updateInputSchema,proto3" json:"update_input_schema,omitempty"`
	// Indicates if the Resource supports the DELETE operation.
	DeleteSupported bool `protobuf:"varint,11,opt,name=delete_supported,json=deleteSupported,proto3" json:"delete_supported,omitempty"`
	// Actions that can be taken on this Resource on demand.
	Actions []*ActionDefinition `protobuf:"bytes,12,rep,name=actions,proto3" json:"actions,omitempty"`
	// The lifecycle stage of this Resource. This is used to help users understand
	// the entire picture of the software lifecycle of their Tempest-managed systems.
	LifecycleStage LifecycleStage `protobuf:"varint,13,opt,name=lifecycle_stage,json=lifecycleStage,proto3,enum=tempestdx.app.v1.LifecycleStage" json:"lifecycle_stage,omitempty"`
	// Links to documentation, administration, support, or other resources.
	Links []*Link `protobuf:"bytes,14,rep,name=links,proto3" json:"links,omitempty"`
	// Markdown formatted instructions for setting up or using the Resource.
	// This field supports resource property variables in the format of {{ resource.<property name> }}.
	InstructionsMarkdown string `protobuf:"bytes,15,opt,name=instructions_markdown,json=instructionsMarkdown,proto3" json:"instructions_markdown,omitempty"`
	// Indicates if the Resource supports healthchecks.
	HealthcheckSupported bool `protobuf:"varint,16,opt,name=healthcheck_supported,json=healthcheckSupported,proto3" json:"healthcheck_supported,omitempty"`
}

func (x *ResourceDefinition) Reset() {
	*x = ResourceDefinition{}
	mi := &file_tempestdx_app_v1_app_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceDefinition) ProtoMessage() {}

func (x *ResourceDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_tempestdx_app_v1_app_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceDefinition.ProtoReflect.Descriptor instead.
func (*ResourceDefinition) Descriptor() ([]byte, []int) {
	return file_tempestdx_app_v1_app_proto_rawDescGZIP(), []int{8}
}

func (x *ResourceDefinition) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ResourceDefinition) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *ResourceDefinition) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ResourceDefinition) GetPropertiesSchema() *structpb.Struct {
	if x != nil {
		return x.PropertiesSchema
	}
	return nil
}

func (x *ResourceDefinition) GetListSupported() bool {
	if x != nil {
		return x.ListSupported
	}
	return false
}

func (x *ResourceDefinition) GetReadSupported() bool {
	if x != nil {
		return x.ReadSupported
	}
	return false
}

func (x *ResourceDefinition) GetCreateSupported() bool {
	if x != nil {
		return x.CreateSupported
	}
	return false
}

func (x *ResourceDefinition) GetCreateInputSchema() *structpb.Struct {
	if x != nil {
		return x.CreateInputSchema
	}
	return nil
}

func (x *ResourceDefinition) GetUpdateSupported() bool {
	if x != nil {
		return x.UpdateSupported
	}
	return false
}

func (x *ResourceDefinition) GetUpdateInputSchema() *structpb.Struct {
	if x != nil {
		return x.UpdateInputSchema
	}
	return nil
}

func (x *ResourceDefinition) GetDeleteSupported() bool {
	if x != nil {
		return x.DeleteSupported
	}
	return false
}

func (x *ResourceDefinition) GetActions() []*ActionDefinition {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *ResourceDefinition) GetLifecycleStage() LifecycleStage {
	if x != nil {
		return x.LifecycleStage
	}
	return LifecycleStage_LIFECYCLE_STAGE_UNSPECIFIED
}

func (x *ResourceDefinition) GetLinks() []*Link {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *ResourceDefinition) GetInstructionsMarkdown() string {
	if x != nil {
		return x.InstructionsMarkdown
	}
	return ""
}

func (x *ResourceDefinition) GetHealthcheckSupported() bool {
	if x != nil {
		return x.HealthcheckSupported
	}
	return false
}

type Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the project that initiated the request.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// The name of the project that initiated the request.
	ProjectName string `protobuf:"bytes,2,opt,name=project_name,json=projectName,proto3" json:"project_name,omitempty"`
	// The Owners associated with the project.
	Owners []*Owner `protobuf:"bytes,3,rep,name=owners,proto3" json:"owners,omitempty"`
	// The author of the request.
	Author *Owner `protobuf:"bytes,4,opt,name=author,proto3" json:"author,omitempty"`
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	mi := &file_tempestdx_app_v1_app_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_tempestdx_app_v1_app_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_tempestdx_app_v1_app_proto_rawDescGZIP(), []int{9}
}

func (x *Metadata) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *Metadata) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *Metadata) GetOwners() []*Owner {
	if x != nil {
		return x.Owners
	}
	return nil
}

func (x *Metadata) GetAuthor() *Owner {
	if x != nil {
		return x.Author
	}
	return nil
}

type Owner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The owner's email address.
	Email string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	// The owner's name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The type of owner.
	Type OwnerType `protobuf:"varint,3,opt,name=type,proto3,enum=tempestdx.app.v1.OwnerType" json:"type,omitempty"`
}

func (x *Owner) Reset() {
	*x = Owner{}
	mi := &file_tempestdx_app_v1_app_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Owner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Owner) ProtoMessage() {}

func (x *Owner) ProtoReflect() protoreflect.Message {
	mi := &file_tempestdx_app_v1_app_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Owner.ProtoReflect.Descriptor instead.
func (*Owner) Descriptor() ([]byte, []int) {
	return file_tempestdx_app_v1_app_proto_rawDescGZIP(), []int{10}
}

func (x *Owner) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Owner) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Owner) GetType() OwnerType {
	if x != nil {
		return x.Type
	}
	return OwnerType_OWNER_TYPE_UNSPECIFIED
}

type EnvironmentVariable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the environment variable.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// The value of the environment variable.
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// The type of the environment variable.
	Type EnvironmentVariableType `protobuf:"varint,3,opt,name=type,proto3,enum=tempestdx.app.v1.EnvironmentVariableType" json:"type,omitempty"`
}

func (x *EnvironmentVariable) Reset() {
	*x = EnvironmentVariable{}
	mi := &file_tempestdx_app_v1_app_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnvironmentVariable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvironmentVariable) ProtoMessage() {}

func (x *EnvironmentVariable) ProtoReflect() protoreflect.Message {
	mi := &file_tempestdx_app_v1_app_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvironmentVariable.ProtoReflect.Descriptor instead.
func (*EnvironmentVariable) Descriptor() ([]byte, []int) {
	return file_tempestdx_app_v1_app_proto_rawDescGZIP(), []int{11}
}

func (x *EnvironmentVariable) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *EnvironmentVariable) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *EnvironmentVariable) GetType() EnvironmentVariableType {
	if x != nil {
		return x.Type
	}
	return EnvironmentVariableType_ENVIRONMENT_VARIABLE_TYPE_UNSPECIFIED
}

type Resource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique type of the resource.
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// The unique ID of the resource in the external system.
	ExternalId string `protobuf:"bytes,2,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
	// The human-readable display name of the resource.
	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Links specific to this Resource instance.
	Links []*Link `protobuf:"bytes,4,rep,name=links,proto3" json:"links,omitempty"`
	// The properties of the resource. This will be validated against the
	// properties_schema of the ResourceDefinition.
	Properties *structpb.Struct `protobuf:"bytes,5,opt,name=properties,proto3" json:"properties,omitempty"`
}

func (x *Resource) Reset() {
	*x = Resource{}
	mi := &file_tempestdx_app_v1_app_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Resource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resource) ProtoMessage() {}

func (x *Resource) ProtoReflect() protoreflect.Message {
	mi := &file_tempestdx_app_v1_app_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resource.ProtoReflect.Descriptor instead.
func (*Resource) Descriptor() ([]byte, []int) {
	return file_tempestdx_app_v1_app_proto_rawDescGZIP(), []int{12}
}

func (x *Resource) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Resource) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

func (x *Resource) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Resource) GetLinks() []*Link {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *Resource) GetProperties() *structpb.Struct {
	if x != nil {
		return x.Properties
	}
	return nil
}

type ExecuteResourceOperationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Tempest metadata about the request.
	Metadata *Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// The Resource to operate on, if any.
	Resource *Resource `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty"`
	// The operation to perform.
	Operation ResourceOperation `protobuf:"varint,3,opt,name=operation,proto3,enum=tempestdx.app.v1.ResourceOperation" json:"operation,omitempty"`
	// The input for the operation, if any.
	Input *structpb.Struct `protobuf:"bytes,4,opt,name=input,proto3" json:"input,omitempty"`
	// The environment variables of the resource.
	EnvironmentVariables []*EnvironmentVariable `protobuf:"bytes,5,rep,name=environment_variables,json=environmentVariables,proto3" json:"environment_variables,omitempty"`
}

func (x *ExecuteResourceOperationRequest) Reset() {
	*x = ExecuteResourceOperationRequest{}
	mi := &file_tempestdx_app_v1_app_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecuteResourceOperationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteResourceOperationRequest) ProtoMessage() {}

func (x *ExecuteResourceOperationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tempestdx_app_v1_app_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteResourceOperationRequest.ProtoReflect.Descriptor instead.
func (*ExecuteResourceOperationRequest) Descriptor() ([]byte, []int) {
	return file_tempestdx_app_v1_app_proto_rawDescGZIP(), []int{13}
}

func (x *ExecuteResourceOperationRequest) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ExecuteResourceOperationRequest) GetResource() *Resource {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *ExecuteResourceOperationRequest) GetOperation() ResourceOperation {
	if x != nil {
		return x.Operation
	}
	return ResourceOperation_RESOURCE_OPERATION_UNSPECIFIED
}

func (x *ExecuteResourceOperationRequest) GetInput() *structpb.Struct {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *ExecuteResourceOperationRequest) GetEnvironmentVariables() []*EnvironmentVariable {
	if x != nil {
		return x.EnvironmentVariables
	}
	return nil
}

type ExecuteResourceOperationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Resource that was operated on.
	Resource *Resource `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`
}

func (x *ExecuteResourceOperationResponse) Reset() {
	*x = ExecuteResourceOperationResponse{}
	mi := &file_tempestdx_app_v1_app_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecuteResourceOperationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteResourceOperationResponse) ProtoMessage() {}

func (x *ExecuteResourceOperationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tempestdx_app_v1_app_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteResourceOperationResponse.ProtoReflect.Descriptor instead.
func (*ExecuteResourceOperationResponse) Descriptor() ([]byte, []int) {
	return file_tempestdx_app_v1_app_proto_rawDescGZIP(), []int{14}
}

func (x *ExecuteResourceOperationResponse) GetResource() *Resource {
	if x != nil {
		return x.Resource
	}
	return nil
}

type ExecuteResourceActionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Tempest metadata about the request.
	Metadata *Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// The Resource related to the action. This may only be the type of the Resource.
	Resource *Resource `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty"`
	// The name of the action to execute
	Action string `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
	// The input for the action, if any.
	Input *structpb.Struct `protobuf:"bytes,4,opt,name=input,proto3" json:"input,omitempty"`
	// The environment variables of the resource.
	EnvironmentVariables []*EnvironmentVariable `protobuf:"bytes,5,rep,name=environment_variables,json=environmentVariables,proto3" json:"environment_variables,omitempty"`
}

func (x *ExecuteResourceActionRequest) Reset() {
	*x = ExecuteResourceActionRequest{}
	mi := &file_tempestdx_app_v1_app_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecuteResourceActionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteResourceActionRequest) ProtoMessage() {}

func (x *ExecuteResourceActionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tempestdx_app_v1_app_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteResourceActionRequest.ProtoReflect.Descriptor instead.
func (*ExecuteResourceActionRequest) Descriptor() ([]byte, []int) {
	return file_tempestdx_app_v1_app_proto_rawDescGZIP(), []int{15}
}

func (x *ExecuteResourceActionRequest) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ExecuteResourceActionRequest) GetResource() *Resource {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *ExecuteResourceActionRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *ExecuteResourceActionRequest) GetInput() *structpb.Struct {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *ExecuteResourceActionRequest) GetEnvironmentVariables() []*EnvironmentVariable {
	if x != nil {
		return x.EnvironmentVariables
	}
	return nil
}

type ExecuteResourceActionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The output of the action, if any.
	Output *structpb.Struct `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *ExecuteResourceActionResponse) Reset() {
	*x = ExecuteResourceActionResponse{}
	mi := &file_tempestdx_app_v1_app_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecuteResourceActionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteResourceActionResponse) ProtoMessage() {}

func (x *ExecuteResourceActionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tempestdx_app_v1_app_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteResourceActionResponse.ProtoReflect.Descriptor instead.
func (*ExecuteResourceActionResponse) Descriptor() ([]byte, []int) {
	return file_tempestdx_app_v1_app_proto_rawDescGZIP(), []int{16}
}

func (x *ExecuteResourceActionResponse) GetOutput() *structpb.Struct {
	if x != nil {
		return x.Output
	}
	return nil
}

type ListResourcesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// The type of resource to list.
	Resource *Resource `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty"`
	// The next page token, if any.
	Next string `protobuf:"bytes,3,opt,name=next,proto3" json:"next,omitempty"`
}

func (x *ListResourcesRequest) Reset() {
	*x = ListResourcesRequest{}
	mi := &file_tempestdx_app_v1_app_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListResourcesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListResourcesRequest) ProtoMessage() {}

func (x *ListResourcesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tempestdx_app_v1_app_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListResourcesRequest.ProtoReflect.Descriptor instead.
func (*ListResourcesRequest) Descriptor() ([]byte, []int) {
	return file_tempestdx_app_v1_app_proto_rawDescGZIP(), []int{17}
}

func (x *ListResourcesRequest) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ListResourcesRequest) GetResource() *Resource {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *ListResourcesRequest) GetNext() string {
	if x != nil {
		return x.Next
	}
	return ""
}

type ListResourcesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Resources of the given type.
	Resources []*Resource `protobuf:"bytes,1,rep,name=resources,proto3" json:"resources,omitempty"`
	// The next page token, if any.
	Next string `protobuf:"bytes,2,opt,name=next,proto3" json:"next,omitempty"`
}

func (x *ListResourcesResponse) Reset() {
	*x = ListResourcesResponse{}
	mi := &file_tempestdx_app_v1_app_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListResourcesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListResourcesResponse) ProtoMessage() {}

func (x *ListResourcesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tempestdx_app_v1_app_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListResourcesResponse.ProtoReflect.Descriptor instead.
func (*ListResourcesResponse) Descriptor() ([]byte, []int) {
	return file_tempestdx_app_v1_app_proto_rawDescGZIP(), []int{18}
}

func (x *ListResourcesResponse) GetResources() []*Resource {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *ListResourcesResponse) GetNext() string {
	if x != nil {
		return x.Next
	}
	return ""
}

var File_tempestdx_app_v1_app_proto protoreflect.FileDescriptor

var file_tempestdx_app_v1_app_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x73, 0x74, 0x64, 0x78, 0x2f, 0x61, 0x70, 0x70, 0x2f,
	0x76, 0x31, 0x2f, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x74, 0x65,
	0x6d, 0x70, 0x65, 0x73, 0x74, 0x64, 0x78, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x11, 0x0a, 0x0f,
	0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x12, 0x0a, 0x10, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x11, 0x0a, 0x0f, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x6b, 0x0a, 0x10, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x14, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x65,
	0x73, 0x74, 0x64, 0x78, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0x28, 0x0a, 0x12, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x6c, 0x0a,
	0x13, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x73, 0x74, 0x64, 0x78,
	0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x5e, 0x0a, 0x04, 0x4c,
	0x69, 0x6e, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x74, 0x65, 0x6d, 0x70,
	0x65, 0x73, 0x74, 0x64, 0x78, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xe5, 0x01, 0x0a, 0x10,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x0c, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x3c, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x22, 0xb5, 0x06, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x61, 0x64, 0x53, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x12, 0x47, 0x0a, 0x13, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x29, 0x0a, 0x10, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x47, 0x0a, 0x13, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x11, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12,
	0x29, 0x0a, 0x10, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x07, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x65,
	0x6d, 0x70, 0x65, 0x73, 0x74, 0x64, 0x78, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x49, 0x0a, 0x0f, 0x6c, 0x69, 0x66, 0x65,
	0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x20, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x73, 0x74, 0x64, 0x78, 0x2e, 0x61, 0x70,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x52, 0x0e, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x73, 0x74, 0x64, 0x78, 0x2e, 0x61,
	0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x6b,
	0x73, 0x12, 0x33, 0x0a, 0x15, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4d, 0x61,
	0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x33, 0x0a, 0x15, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x22, 0xae, 0x01, 0x0a, 0x08,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x65, 0x6d,
	0x70, 0x65, 0x73, 0x74, 0x64, 0x78, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x52, 0x06, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x65,
	0x6d, 0x70, 0x65, 0x73, 0x74, 0x64, 0x78, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x22, 0x62, 0x0a, 0x05,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x2f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e,
	0x74, 0x65, 0x6d, 0x70, 0x65, 0x73, 0x74, 0x64, 0x78, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x7c, 0x0a, 0x13, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x3d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e,
	0x74, 0x65, 0x6d, 0x70, 0x65, 0x73, 0x74, 0x64, 0x78, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xc9,
	0x01, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x73, 0x74, 0x64, 0x78, 0x2e, 0x61,
	0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x6b,
	0x73, 0x12, 0x37, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0a,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22, 0xdf, 0x02, 0x0a, 0x1f, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x73, 0x74, 0x64, 0x78, 0x2e, 0x61, 0x70, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x65,
	0x73, 0x74, 0x64, 0x78, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x41,
	0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x23, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x73, 0x74, 0x64, 0x78, 0x2e, 0x61, 0x70,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2d, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x12, 0x5a, 0x0a, 0x15, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x73, 0x74, 0x64, 0x78, 0x2e, 0x61, 0x70, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x14, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x22, 0x5a, 0x0a, 0x20,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x36, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x73, 0x74, 0x64, 0x78, 0x2e, 0x61,
	0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x08,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xb1, 0x02, 0x0a, 0x1c, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x65,
	0x6d, 0x70, 0x65, 0x73, 0x74, 0x64, 0x78, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x36, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x73, 0x74, 0x64, 0x78, 0x2e,
	0x61, 0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2d, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x12, 0x5a, 0x0a, 0x15, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x73, 0x74, 0x64, 0x78, 0x2e, 0x61, 0x70, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x14, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x22, 0x50, 0x0a, 0x1d,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a,
	0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x9a,
	0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x65, 0x6d, 0x70,
	0x65, 0x73, 0x74, 0x64, 0x78, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x36, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x73, 0x74, 0x64, 0x78, 0x2e, 0x61, 0x70,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x08, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x22, 0x65, 0x0a, 0x15, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x73,
	0x74, 0x64, 0x78, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x65,
	0x78, 0x74, 0x2a, 0x9e, 0x01, 0x0a, 0x11, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x1f, 0x48, 0x45, 0x41, 0x4c,
	0x54, 0x48, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a,
	0x1b, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x59, 0x10, 0x01, 0x12, 0x20,
	0x0a, 0x1c, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x47, 0x52, 0x41, 0x44, 0x45, 0x44, 0x10, 0x02,
	0x12, 0x21, 0x0a, 0x1d, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x49, 0x53, 0x52, 0x55, 0x50, 0x54, 0x45,
	0x44, 0x10, 0x03, 0x2a, 0xa7, 0x01, 0x0a, 0x08, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x4c,
	0x49, 0x4e, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e,
	0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x4c, 0x49, 0x4e, 0x4b,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x49, 0x53, 0x54, 0x52, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x03, 0x12, 0x16, 0x0a,
	0x12, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x4e, 0x44, 0x50, 0x4f,
	0x49, 0x4e, 0x54, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x05, 0x2a, 0x8e, 0x02,
	0x0a, 0x0e, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x12, 0x1f, 0x0a, 0x1b, 0x4c, 0x49, 0x46, 0x45, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x47, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x18, 0x0a, 0x14, 0x4c, 0x49, 0x46, 0x45, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x4c,
	0x49, 0x46, 0x45, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x42,
	0x55, 0x49, 0x4c, 0x44, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x4c, 0x49, 0x46, 0x45, 0x43, 0x59,
	0x43, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x10, 0x03,
	0x12, 0x1b, 0x0a, 0x17, 0x4c, 0x49, 0x46, 0x45, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x4c, 0x45, 0x41, 0x53, 0x45, 0x10, 0x04, 0x12, 0x1a, 0x0a,
	0x16, 0x4c, 0x49, 0x46, 0x45, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45,
	0x5f, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x10, 0x05, 0x12, 0x1b, 0x0a, 0x17, 0x4c, 0x49, 0x46,
	0x45, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x4f, 0x50, 0x45,
	0x52, 0x41, 0x54, 0x45, 0x10, 0x06, 0x12, 0x1b, 0x0a, 0x17, 0x4c, 0x49, 0x46, 0x45, 0x43, 0x59,
	0x43, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f,
	0x52, 0x10, 0x07, 0x12, 0x19, 0x0a, 0x15, 0x4c, 0x49, 0x46, 0x45, 0x43, 0x59, 0x43, 0x4c, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x08, 0x2a, 0x51,
	0x0a, 0x09, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x4f,
	0x57, 0x4e, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x57, 0x4e, 0x45, 0x52,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f,
	0x4f, 0x57, 0x4e, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x10,
	0x02, 0x2a, 0xb1, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x52,
	0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52,
	0x45, 0x41, 0x44, 0x10, 0x04, 0x2a, 0x8d, 0x02, 0x0a, 0x17, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x29, 0x0a, 0x25, 0x45, 0x4e, 0x56, 0x49, 0x52, 0x4f, 0x4e, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x56, 0x41, 0x52, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d,
	0x45, 0x4e, 0x56, 0x49, 0x52, 0x4f, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x56, 0x41, 0x52, 0x49,
	0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x41, 0x52, 0x10, 0x01, 0x12,
	0x24, 0x0a, 0x20, 0x45, 0x4e, 0x56, 0x49, 0x52, 0x4f, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x56,
	0x41, 0x52, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x43,
	0x52, 0x45, 0x54, 0x10, 0x02, 0x12, 0x29, 0x0a, 0x25, 0x45, 0x4e, 0x56, 0x49, 0x52, 0x4f, 0x4e,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x56, 0x41, 0x52, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x10, 0x03,
	0x12, 0x29, 0x0a, 0x25, 0x45, 0x4e, 0x56, 0x49, 0x52, 0x4f, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x56, 0x41, 0x52, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52,
	0x49, 0x56, 0x41, 0x54, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x04, 0x12, 0x28, 0x0a, 0x24, 0x45,
	0x4e, 0x56, 0x49, 0x52, 0x4f, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x56, 0x41, 0x52, 0x49, 0x41,
	0x42, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f,
	0x4b, 0x45, 0x59, 0x10, 0x05, 0x32, 0xfa, 0x04, 0x0a, 0x0a, 0x41, 0x70, 0x70, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x53, 0x0a, 0x08, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x12, 0x21, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x73, 0x74, 0x64, 0x78, 0x2e, 0x61, 0x70, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x73, 0x74, 0x64, 0x78, 0x2e,
	0x61, 0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x0b, 0x48, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x24, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x65,
	0x73, 0x74, 0x64, 0x78, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25,
	0x2e, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x73, 0x74, 0x64, 0x78, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x83, 0x01, 0x0a, 0x18, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x73, 0x74, 0x64, 0x78,
	0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x73,
	0x74, 0x64, 0x78, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x62, 0x0a,
	0x0d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x26,
	0x2e, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x73, 0x74, 0x64, 0x78, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x73, 0x74,
	0x64, 0x78, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x7a, 0x0a, 0x15, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x2e, 0x74, 0x65, 0x6d,
	0x70, 0x65, 0x73, 0x74, 0x64, 0x78, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x74, 0x65, 0x6d,
	0x70, 0x65, 0x73, 0x74, 0x64, 0x78, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a,
	0x08, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x21, 0x2e, 0x74, 0x65, 0x6d, 0x70,
	0x65, 0x73, 0x74, 0x64, 0x78, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68, 0x75,
	0x74, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x74,
	0x65, 0x6d, 0x70, 0x65, 0x73, 0x74, 0x64, 0x78, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x42, 0xbf, 0x01, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x65,
	0x73, 0x74, 0x64, 0x78, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31, 0x42, 0x08, 0x41, 0x70, 0x70,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x73, 0x74, 0x64, 0x78, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x74, 0x65,
	0x6d, 0x70, 0x65, 0x73, 0x74, 0x64, 0x78, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x76, 0x31, 0x3b, 0x61,
	0x70, 0x70, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x54, 0x41, 0x58, 0xaa, 0x02, 0x10, 0x54, 0x65, 0x6d,
	0x70, 0x65, 0x73, 0x74, 0x64, 0x78, 0x2e, 0x41, 0x70, 0x70, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x10,
	0x54, 0x65, 0x6d, 0x70, 0x65, 0x73, 0x74, 0x64, 0x78, 0x5c, 0x41, 0x70, 0x70, 0x5c, 0x56, 0x31,
	0xe2, 0x02, 0x1c, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x73, 0x74, 0x64, 0x78, 0x5c, 0x41, 0x70, 0x70,
	0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,
	0x02, 0x12, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x73, 0x74, 0x64, 0x78, 0x3a, 0x3a, 0x41, 0x70, 0x70,
	0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tempestdx_app_v1_app_proto_rawDescOnce sync.Once
	file_tempestdx_app_v1_app_proto_rawDescData = file_tempestdx_app_v1_app_proto_rawDesc
)

func file_tempestdx_app_v1_app_proto_rawDescGZIP() []byte {
	file_tempestdx_app_v1_app_proto_rawDescOnce.Do(func() {
		file_tempestdx_app_v1_app_proto_rawDescData = protoimpl.X.CompressGZIP(file_tempestdx_app_v1_app_proto_rawDescData)
	})
	return file_tempestdx_app_v1_app_proto_rawDescData
}

var file_tempestdx_app_v1_app_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_tempestdx_app_v1_app_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_tempestdx_app_v1_app_proto_goTypes = []any{
	(HealthCheckStatus)(0),                   // 0: tempestdx.app.v1.HealthCheckStatus
	(LinkType)(0),                            // 1: tempestdx.app.v1.LinkType
	(LifecycleStage)(0),                      // 2: tempestdx.app.v1.LifecycleStage
	(OwnerType)(0),                           // 3: tempestdx.app.v1.OwnerType
	(ResourceOperation)(0),                   // 4: tempestdx.app.v1.ResourceOperation
	(EnvironmentVariableType)(0),             // 5: tempestdx.app.v1.EnvironmentVariableType
	(*ShutdownRequest)(nil),                  // 6: tempestdx.app.v1.ShutdownRequest
	(*ShutdownResponse)(nil),                 // 7: tempestdx.app.v1.ShutdownResponse
	(*DescribeRequest)(nil),                  // 8: tempestdx.app.v1.DescribeRequest
	(*DescribeResponse)(nil),                 // 9: tempestdx.app.v1.DescribeResponse
	(*HealthCheckRequest)(nil),               // 10: tempestdx.app.v1.HealthCheckRequest
	(*HealthCheckResponse)(nil),              // 11: tempestdx.app.v1.HealthCheckResponse
	(*Link)(nil),                             // 12: tempestdx.app.v1.Link
	(*ActionDefinition)(nil),                 // 13: tempestdx.app.v1.ActionDefinition
	(*ResourceDefinition)(nil),               // 14: tempestdx.app.v1.ResourceDefinition
	(*Metadata)(nil),                         // 15: tempestdx.app.v1.Metadata
	(*Owner)(nil),                            // 16: tempestdx.app.v1.Owner
	(*EnvironmentVariable)(nil),              // 17: tempestdx.app.v1.EnvironmentVariable
	(*Resource)(nil),                         // 18: tempestdx.app.v1.Resource
	(*ExecuteResourceOperationRequest)(nil),  // 19: tempestdx.app.v1.ExecuteResourceOperationRequest
	(*ExecuteResourceOperationResponse)(nil), // 20: tempestdx.app.v1.ExecuteResourceOperationResponse
	(*ExecuteResourceActionRequest)(nil),     // 21: tempestdx.app.v1.ExecuteResourceActionRequest
	(*ExecuteResourceActionResponse)(nil),    // 22: tempestdx.app.v1.ExecuteResourceActionResponse
	(*ListResourcesRequest)(nil),             // 23: tempestdx.app.v1.ListResourcesRequest
	(*ListResourcesResponse)(nil),            // 24: tempestdx.app.v1.ListResourcesResponse
	(*structpb.Struct)(nil),                  // 25: google.protobuf.Struct
}
var file_tempestdx_app_v1_app_proto_depIdxs = []int32{
	14, // 0: tempestdx.app.v1.DescribeResponse.resource_definitions:type_name -> tempestdx.app.v1.ResourceDefinition
	0,  // 1: tempestdx.app.v1.HealthCheckResponse.status:type_name -> tempestdx.app.v1.HealthCheckStatus
	1,  // 2: tempestdx.app.v1.Link.type:type_name -> tempestdx.app.v1.LinkType
	25, // 3: tempestdx.app.v1.ActionDefinition.input_schema:type_name -> google.protobuf.Struct
	25, // 4: tempestdx.app.v1.ActionDefinition.output_schema:type_name -> google.protobuf.Struct
	25, // 5: tempestdx.app.v1.ResourceDefinition.properties_schema:type_name -> google.protobuf.Struct
	25, // 6: tempestdx.app.v1.ResourceDefinition.create_input_schema:type_name -> google.protobuf.Struct
	25, // 7: tempestdx.app.v1.ResourceDefinition.update_input_schema:type_name -> google.protobuf.Struct
	13, // 8: tempestdx.app.v1.ResourceDefinition.actions:type_name -> tempestdx.app.v1.ActionDefinition
	2,  // 9: tempestdx.app.v1.ResourceDefinition.lifecycle_stage:type_name -> tempestdx.app.v1.LifecycleStage
	12, // 10: tempestdx.app.v1.ResourceDefinition.links:type_name -> tempestdx.app.v1.Link
	16, // 11: tempestdx.app.v1.Metadata.owners:type_name -> tempestdx.app.v1.Owner
	16, // 12: tempestdx.app.v1.Metadata.author:type_name -> tempestdx.app.v1.Owner
	3,  // 13: tempestdx.app.v1.Owner.type:type_name -> tempestdx.app.v1.OwnerType
	5,  // 14: tempestdx.app.v1.EnvironmentVariable.type:type_name -> tempestdx.app.v1.EnvironmentVariableType
	12, // 15: tempestdx.app.v1.Resource.links:type_name -> tempestdx.app.v1.Link
	25, // 16: tempestdx.app.v1.Resource.properties:type_name -> google.protobuf.Struct
	15, // 17: tempestdx.app.v1.ExecuteResourceOperationRequest.metadata:type_name -> tempestdx.app.v1.Metadata
	18, // 18: tempestdx.app.v1.ExecuteResourceOperationRequest.resource:type_name -> tempestdx.app.v1.Resource
	4,  // 19: tempestdx.app.v1.ExecuteResourceOperationRequest.operation:type_name -> tempestdx.app.v1.ResourceOperation
	25, // 20: tempestdx.app.v1.ExecuteResourceOperationRequest.input:type_name -> google.protobuf.Struct
	17, // 21: tempestdx.app.v1.ExecuteResourceOperationRequest.environment_variables:type_name -> tempestdx.app.v1.EnvironmentVariable
	18, // 22: tempestdx.app.v1.ExecuteResourceOperationResponse.resource:type_name -> tempestdx.app.v1.Resource
	15, // 23: tempestdx.app.v1.ExecuteResourceActionRequest.metadata:type_name -> tempestdx.app.v1.Metadata
	18, // 24: tempestdx.app.v1.ExecuteResourceActionRequest.resource:type_name -> tempestdx.app.v1.Resource
	25, // 25: tempestdx.app.v1.ExecuteResourceActionRequest.input:type_name -> google.protobuf.Struct
	17, // 26: tempestdx.app.v1.ExecuteResourceActionRequest.environment_variables:type_name -> tempestdx.app.v1.EnvironmentVariable
	25, // 27: tempestdx.app.v1.ExecuteResourceActionResponse.output:type_name -> google.protobuf.Struct
	15, // 28: tempestdx.app.v1.ListResourcesRequest.metadata:type_name -> tempestdx.app.v1.Metadata
	18, // 29: tempestdx.app.v1.ListResourcesRequest.resource:type_name -> tempestdx.app.v1.Resource
	18, // 30: tempestdx.app.v1.ListResourcesResponse.resources:type_name -> tempestdx.app.v1.Resource
	8,  // 31: tempestdx.app.v1.AppService.Describe:input_type -> tempestdx.app.v1.DescribeRequest
	10, // 32: tempestdx.app.v1.AppService.HealthCheck:input_type -> tempestdx.app.v1.HealthCheckRequest
	19, // 33: tempestdx.app.v1.AppService.ExecuteResourceOperation:input_type -> tempestdx.app.v1.ExecuteResourceOperationRequest
	23, // 34: tempestdx.app.v1.AppService.ListResources:input_type -> tempestdx.app.v1.ListResourcesRequest
	21, // 35: tempestdx.app.v1.AppService.ExecuteResourceAction:input_type -> tempestdx.app.v1.ExecuteResourceActionRequest
	6,  // 36: tempestdx.app.v1.AppService.Shutdown:input_type -> tempestdx.app.v1.ShutdownRequest
	9,  // 37: tempestdx.app.v1.AppService.Describe:output_type -> tempestdx.app.v1.DescribeResponse
	11, // 38: tempestdx.app.v1.AppService.HealthCheck:output_type -> tempestdx.app.v1.HealthCheckResponse
	20, // 39: tempestdx.app.v1.AppService.ExecuteResourceOperation:output_type -> tempestdx.app.v1.ExecuteResourceOperationResponse
	24, // 40: tempestdx.app.v1.AppService.ListResources:output_type -> tempestdx.app.v1.ListResourcesResponse
	22, // 41: tempestdx.app.v1.AppService.ExecuteResourceAction:output_type -> tempestdx.app.v1.ExecuteResourceActionResponse
	7,  // 42: tempestdx.app.v1.AppService.Shutdown:output_type -> tempestdx.app.v1.ShutdownResponse
	37, // [37:43] is the sub-list for method output_type
	31, // [31:37] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_tempestdx_app_v1_app_proto_init() }
func file_tempestdx_app_v1_app_proto_init() {
	if File_tempestdx_app_v1_app_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tempestdx_app_v1_app_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tempestdx_app_v1_app_proto_goTypes,
		DependencyIndexes: file_tempestdx_app_v1_app_proto_depIdxs,
		EnumInfos:         file_tempestdx_app_v1_app_proto_enumTypes,
		MessageInfos:      file_tempestdx_app_v1_app_proto_msgTypes,
	}.Build()
	File_tempestdx_app_v1_app_proto = out.File
	file_tempestdx_app_v1_app_proto_rawDesc = nil
	file_tempestdx_app_v1_app_proto_goTypes = nil
	file_tempestdx_app_v1_app_proto_depIdxs = nil
}
